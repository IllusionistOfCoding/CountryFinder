package com.alessandrosisto.countryfinder.network

import com.alessandrosisto.countryfinder.models.IQueryDefinition
import com.apollographql.apollo.ApolloClient
import com.apollographql.apollo.coroutines.await
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class CountryFinderDataSource @Inject constructor(
    @PublishedApi internal val apolloClient: ApolloClient
) {

    /**
     * Apollo Android Client returns classes that are auto-generated by apollo.
     *
     * @param T the data model can be return.
     * @property queryDefinition the type of query.
     */

    suspend inline fun <reified T> fetchDataQuery(queryDefinition: IQueryDefinition<T>): T? =
        withContext(Dispatchers.IO) {
            try {
                val response = apolloClient.query(queryDefinition.query).await()
                response.data as? T?
            } catch (e: Exception) {
                e.stackTraceToString()
                null
            }
        }

}