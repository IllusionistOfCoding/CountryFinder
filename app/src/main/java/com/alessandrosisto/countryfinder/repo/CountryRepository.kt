package com.alessandrosisto.countryfinder.repo

import com.alessandrosisto.countryfinder.models.*
import com.apollographql.apollo.ApolloClient
import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.toJson
import com.apollographql.apollo.coroutines.await
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.google.gson.JsonObject
import com.alessandrosisto.countryfinder.utilis.Result
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class CountryRepository: CountryRepositoryInterface {

    private val apolloClient = ApolloClient.builder()
        .serverUrl("https://countries.trevorblades.com/")
        .build()

    private val _gson: Gson = GsonBuilder().create()

    override suspend fun getAllContinents(): Result<List<Continent>> {
        return try {
            val query = AllContinentsQuery
            val response: List<Continent>? = fetchDataQuery(query)
            response?.let {
                Result.Success(it)
            } ?: run {
                Result.Success(emptyList())
            }
        } catch (e: Exception) {
            Result.Error(e)
        }
    }

    override suspend fun getAllLanguages(): Result<List<Language>> {
        return try {
            val query = AllLanguagesQuery
            val response: List<Language>? = fetchDataQuery(query)
            response?.let {
                Result.Success(it)
            } ?: run {
                Result.Success(emptyList())
            }
        } catch (e: Exception) {
            Result.Error(e)
        }
    }

    override suspend fun getCountry(code: String): Result<Country> {
        return try {
            val query = CountryQuery(code)
            val response: Country? = fetchDataQuery(query)
            response?.let {
                Result.Success(it)
            } ?: run {
                Result.Error(IllegalStateException())
            }
        } catch (e: Exception) {
            Result.Error(e)
        }
    }

    override suspend fun getAllCountriesInContinent(code: String): Result<List<Country>> {
        return try {
            val query = ContinentQuery(code)
            val response: Continent? = fetchDataQuery(query)
            response?.countries?.let {
                Result.Success(it)
            } ?: run {
                Result.Success(emptyList())
            }
        } catch (e: Exception) {
            Result.Error(e)
        }
    }


    /**
     * Apollo Android Client returns classes that are auto-generated by apollo.
     * I serialize and deserialize query response with JSON then I can parse it to
     * the data model easier.
     *
     * @param T the data model can be return.
     * @property queryDefinition the type of query.
     */
    private suspend fun <T> fetchDataQuery(queryDefinition: IQueryDefinition<T>): T? {
        return try {
            withContext(Dispatchers.IO) {
                val response = apolloClient.query(queryDefinition.query).await()
                convertDataQuery(response, queryDefinition)
            }
        } catch (e: Exception) {
            e.stackTraceToString()
            null
        }
    }

    /**
     * Apollo Android Client returns classes that are auto-generated by apollo.
     * I serialize and deserialize query response with JSON then I can parse it to
     * the data model easier.
     *
     * @param T the data model can be return.
     * @property response the apollo client response of query.
     * @property queryDefinition the type of query.
     */
    private fun <T> convertDataQuery(
        response: Response<out Operation.Data>,
        queryDefinition: IQueryDefinition<T>
    ): T? {
        return response.data?.let { rawData ->
            val convertedObject = _gson.fromJson(rawData.toJson(), JsonObject::class.java)
            val data = convertedObject.getAsJsonObject("data")
            val valueKey = queryDefinition.rootKey ?: data.keySet().first()
            val value = data.get(valueKey)
            return _gson.fromJson(value, queryDefinition.returnType)
        } ?: run {
            null
        }
    }
}