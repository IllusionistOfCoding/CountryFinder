package com.alessandrosisto.countryfinder.repo

import GetContinentsQuery
import com.alessandrosisto.countryfinder.models.*
import com.alessandrosisto.countryfinder.utilis.Result
import com.apollographql.apollo.ApolloClient
import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.toJson
import com.apollographql.apollo.coroutines.await
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.google.gson.JsonObject
import fragment.ContinentFragment
import fragment.CountryFragment
import fragment.LanguageFragment
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class CountryRepository : CountryRepositoryInterface {

    private val apolloClient = ApolloClient.builder()
        .serverUrl("https://countries.trevorblades.com/")
        .build()

    override suspend fun getAllContinents(): Result<List<ContinentFragment>> {
        return try {
            val query = AllContinentsQuery
            val response: GetContinentsQuery.Data? = fetchDataQuery(query)
            response?.continents?.map { it.fragments.continentFragment }?.let {
                Result.Success(it)
            } ?: run {
                Result.Success(emptyList())
            }
        } catch (e: Exception) {
            Result.Error(e)
        }
    }

    override suspend fun getAllLanguages(): Result<List<LanguageFragment>> {
        return try {
            val query = AllLanguagesQuery
            val response: GetLanguagesQuery.Data? = fetchDataQuery(query)
            response?.languages?.map {
                it.fragments.languageFragment
            }?.let {
                Result.Success(it)
            } ?: run {
                Result.Success(emptyList())
            }
        } catch (e: Exception) {
            Result.Error(e)
        }
    }

    override suspend fun getCountry(code: String): Result<CountryFragment> {
        return try {
            val query = CountryQuery(code)
            val response: GetCountryQuery.Data? = fetchDataQuery(query)
            response?.country?.fragments?.countryFragment?.let {
                Result.Success(it)
            } ?: run {
                Result.Error(IllegalStateException())
            }
        } catch (e: Exception) {
            Result.Error(e)
        }
    }

    override suspend fun getAllCountriesInContinent(code: String): Result<List<CountryFragment>> {
        return try {
            val query = ContinentQuery(code)
            val response: GetContinentQuery.Data? = fetchDataQuery(query)
            response?.continent?.fragments?.continentFragment?.countries?.map {
                it.fragments.countryFragment
            }?.let {
                Result.Success(it)
            } ?: run {
                Result.Success(emptyList())
            }
        } catch (e: Exception) {
            Result.Error(e)
        }
    }


    /**
     * Apollo Android Client returns classes that are auto-generated by apollo.
     * I serialize and deserialize query response with JSON then I can parse it to
     * the data model easier.
     *
     * @param T the data model can be return.
     * @property queryDefinition the type of query.
     */
    private suspend inline fun <reified T> fetchDataQuery(queryDefinition: IQueryDefinition<T>): T? =
        withContext(Dispatchers.IO) {
            try {
                val response = apolloClient.query(queryDefinition.query).await()
                response.data as? T?
            } catch (e: Exception) {
                e.stackTraceToString()
                null
            }
        }
}